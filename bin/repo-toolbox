#!/usr/bin/env python


# TODO: add logging with Logging level
# https://github.com/josegonzalez/python-github-backup/blob/master/bin/github-backup
# import logging

# https://stackoverflow.com/questions/6323860/sibling-package-imports
# Ugly hack to allow absolute import from the root folder
# whatever its name is. Please forgive the heresy.
if __name__ == "__main__" and __package__ is None:
    from sys import path
    from os.path import dirname as dir

    path.append(dir(path[0]))
    __package__ = "examples"

import json
from toolbox.people import *
from toolbox.cli import parse_args
from toolbox.repo import get_repo_size, get_repo_size


import csv
def write_csv(args, filename, keys, input_content):
    '''csv writer for header line and content rows'''
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=',', dialect='excel')
        writer.writerow(key for key in keys)
        for item in input_content:
            content_dict = retrieve_user_details(args=args, github_acct_name=item, keys=keys)
            writer.writerow(content_dict[key] for key in keys)


def write_csv_detail_retrieved(args, filename, keys, input_content):
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=',', dialect='excel')
        writer.writerow(key for key in keys)
        for item in input_content:
            content_dict = item
            writer.writerow(content_dict[key] for key in keys)


def main():
    args, unknown = parse_args()
    print("input args were: ", args)

    # # # user mgmt
    # parsed_results = get_2fa_disabled_members(args)
    # keys = ['login','email','name']
    # write_csv(args,'member-no-2fa.csv', keys, parsed_results)

    # parsed_results = get_2fa_disabled_outside_contributors(args)
    # write_csv(args,'outside_contributors-no-2fa.csv', keys, parsed_results)

    keys = ['login','email','name']
    parsed_results = get_nameless_members(args, keys)
    write_csv_detail_retrieved(args, 'nameless_members.csv', keys, parsed_results)

    parsed_results = get_nameless_outside_contributors(args, keys)
    write_csv_detail_retrieved(args, 'nameless_outside_contributors.csv', keys, parsed_results)


    # get sum size of an Org's repos
    # repos = get_repo_size(args)
    # print(repos)


if __name__ == '__main__':
    main()
